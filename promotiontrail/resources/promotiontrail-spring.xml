<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ [y] hybris Platform
  ~ 
  ~ Copyright (c) 2000-2016 SAP SE
  ~ All rights reserved.
  ~ 
  ~ This software is the confidential and proprietary information of SAP 
  ~ Hybris ("Confidential Information"). You shall not disclose such 
  ~ Confidential Information and shall use it only in accordance with the 
  ~ terms of the license agreement you entered into with SAP Hybris.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!--
	The hybris platform provides one single Spring application context for beans located at the jalo layer.
	Each extension can add beans to this context by specifying them at this configuration file.
	 
	You can use and/or redefine beans defined at configuration files of other extensions as well as
	adding new one.
		
	If you want to locate this file at a different location or want to use several files for better,
	structuring, please use the '<yourextension>.application-context' property at your project.properties file.
	There you can specify a comma separated list of files where first is tried to find a file per classpath and
	then per file system.

	
	If you want to configure beans for your web module please have a look at
	your web/webroot/WEB-INF/<extname>-web-spring.xml.
	-->
	
	<!--  Example how to override a manager -->
	<!--
	<bean id="core.productManager"   class="com.techouts.promotions.jalo.PromotiontrailProductManager" 	init-method="init"	destroy-method="destroy" />
	-->
	
	
 	<!--  Example how to configure the class to use for jalo session creation -->
	<!--
	<bean id="jalosession"   class="de.hybris.platform.jalo.JaloSessionFactory">
		<property name="targetClassName" value="com.techouts.promotions.jalo.PromotiontrailJaloSession"/>
	</bean>
	-->

	
	<!--  Example how to override an item  -->
	<!-- 
	<bean id="de.hybris.platform.jalo.product.Product" class="com.techouts.promotions.jalo.PromotiontrailProduct" scope="prototype" />		
 	-->

	<!--  
	 Example how to register and use an AOP aspect 
     Also see http://static.springframework.org/spring/docs/2.5.x/reference/aop.html	
     -->
	
	<!-- 
	<bean id="promotiontrailProfBean" class="com.techouts.promotions.aop.PromotiontrailProfilingAspect"/>
	<aop:config proxy-target-class="true">
  		<aop:aspect id="promotiontrailProfAspect" ref="promotiontrailProfBean" >
    	  <aop:pointcut id="profiledMethods" 
	      	expression="execution(* getModificationTime(..))" />  	            
	   		<aop:around pointcut-ref="profiledMethods" method="profile" />
  		</aop:aspect>
	</aop:config>
	 -->

	
	<!-- some other examples of a pointcut that matches everything:

    	  <aop:pointcut id="profiledMethods" 
	      	expression="bean(de.hybris.platform.jalo.user.Customer) &amp;&amp; 
	      	            !execution(* getPK(..))" />  	            
	       <aop:pointcut id="profiledMethods" expression="execution(* *(..))" />	
	  -->
	
    <bean id="promotiontrailSystemSetup" class="com.techouts.promotions.setup.PromotiontrailSystemSetup">
        <!-- constructor arg injection example -->
        <constructor-arg ref="promotiontrailService"/>
    </bean>

    <bean id="promotiontrailService" class="com.techouts.promotions.service.impl.DefaultPromotiontrailService">
        <!-- setter injection example -->
        <property name="modelService" ref="modelService"/>
        <property name="mediaService" ref="mediaService"/>
        <property name="flexibleSearchService" ref="flexibleSearchService"/>
        
    </bean>
    
    <alias alias="CustomRuleProductPriceConditionTranslator" name="defaultCustomRuleProductPriceConditionTranslator" />
	<bean id="defaultCustomRuleProductPriceConditionTranslator" class="com.techouts.promotions.custom.CustomRuleProductPriceConditionTranslator" />
        
       <bean id="productOnlineDaysValueProvider" class="org.training.core.search.solrfacetsearch.provider.impl.ProductOnlineDaysValueProvider"
           parent="abstractPropertyFieldValueProvider">
       <!--  <property name="fieldNameProvider" ref="solrFieldNameProvider"/> -->
    </bean> 
    
    
    
    <alias name="trainingSearchResultVariantProductPopulator" alias="commerceSearchResultProductPopulator"/>
    <bean id="trainingSearchResultVariantProductPopulator" class="org.training.facades.search.converters.populators.TrainingSearchResultVariantProductPopulator"
          parent="variantCommerceSearchResultProductPopulator">
    </bean>
    
    <!--Added by for new interceptor for product  -->
    
    <bean id="myProductLevelInterceptor" class="com.techouts.product.ProductLevelInterceptor"
      autowire="byName"/>
      
      <bean id="MyValidateInterceptorMapping" 
      class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
    <property name="interceptor" ref="myProductLevelInterceptor"/>
    <property name="typeCode" value="Product"/>
    <property name="replacedInterceptors" ref="uniqueCatalogItemValidator"/>
 
    <!-- The order property is only effective with 4.1.1 and later -->
    <property name="order" value="5000"/>
    
       
</bean>
		<alias name="myProductLevelInterceptor2" alias="myProductLevelInterceptor"/>
	<bean id="myProductLevelInterceptor2" class="com.techouts.product.ProductLevelInterceptor2"
      autowire="byName"/>	    
<bean id="customerSiteAge" class="com.techouts.customdynamicattribute.CustomerSiteAgeHandler"/>	
<bean id="stocklevelEventListener" class="com.techouts.events.StocklevelEventListener" autowire="byName"/>
</beans>
